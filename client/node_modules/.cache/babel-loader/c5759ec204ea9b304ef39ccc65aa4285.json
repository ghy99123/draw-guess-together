{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\n/**\n * @param duration total duration in second\n * @param onFinish callback funciton when the count down finishes\n * @returns a function to start the count down and a stateful value of remaining time in second\n */\n\nconst useCountDown = (duration, onFinish) => {\n  _s();\n\n  const milliDuration = duration * 1000;\n  const startRef = useRef();\n  const requestRef = useRef();\n  const [remain, setRemain] = useState(milliDuration);\n\n  const start = () => {\n    if (requestRef.current) {\n      cancelAnimationFrame(requestRef.current);\n    } // Using requestAnimationFrame instead of setInterval to get more smooth user experinece\n\n\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  const animate = time => {\n    if (startRef.current === undefined) startRef.current = time;\n    const elapsed = time - startRef.current;\n\n    if (elapsed < milliDuration) {\n      setRemain(milliDuration - elapsed);\n      requestAnimationFrame(animate);\n    } else {\n      if (typeof onFinish === \"function\") onFinish();\n    }\n  };\n\n  return [start, remain / 1000];\n};\n\n_s(useCountDown, \"8EzYn2sDaMlCHP0l6vOrOwIldgU=\");\n\nexport default useCountDown;","map":{"version":3,"names":["useRef","useState","useCountDown","duration","onFinish","milliDuration","startRef","requestRef","remain","setRemain","start","current","cancelAnimationFrame","requestAnimationFrame","animate","time","undefined","elapsed"],"sources":["/Users/ghy/cs/program/draw-guess-together/src/hooks/useCountDown.ts"],"sourcesContent":["import React, { useRef, useState } from \"react\";\n\n/**\n * @param duration total duration in second\n * @param onFinish callback funciton when the count down finishes\n * @returns a function to start the count down and a stateful value of remaining time in second\n */\nconst useCountDown = (\n  duration: number,\n  onFinish?: () => void\n): [() => void, number] => {\n  const milliDuration = duration * 1000;\n  const startRef = useRef<number>();\n  const requestRef = useRef<number>();\n  const [remain, setRemain] = useState<number>(milliDuration);\n\n  const start = () => {\n    if (requestRef.current) {\n      cancelAnimationFrame(requestRef.current);\n    }\n    // Using requestAnimationFrame instead of setInterval to get more smooth user experinece\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  const animate = (time: number) => {\n    if (startRef.current === undefined) startRef.current = time;\n    const elapsed = time - startRef.current;\n\n    if (elapsed < milliDuration) {\n      setRemain(milliDuration - elapsed);\n      requestAnimationFrame(animate);\n    } else {\n      if (typeof onFinish === \"function\") onFinish();\n    }\n  };\n\n  return [start, remain / 1000];\n};\n\nexport default useCountDown;\n"],"mappings":";;AAAA,SAAgBA,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,CACnBC,QADmB,EAEnBC,QAFmB,KAGM;EAAA;;EACzB,MAAMC,aAAa,GAAGF,QAAQ,GAAG,IAAjC;EACA,MAAMG,QAAQ,GAAGN,MAAM,EAAvB;EACA,MAAMO,UAAU,GAAGP,MAAM,EAAzB;EACA,MAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAASI,aAAT,CAApC;;EAEA,MAAMK,KAAK,GAAG,MAAM;IAClB,IAAIH,UAAU,CAACI,OAAf,EAAwB;MACtBC,oBAAoB,CAACL,UAAU,CAACI,OAAZ,CAApB;IACD,CAHiB,CAIlB;;;IACAJ,UAAU,CAACI,OAAX,GAAqBE,qBAAqB,CAACC,OAAD,CAA1C;EACD,CAND;;EAQA,MAAMA,OAAO,GAAIC,IAAD,IAAkB;IAChC,IAAIT,QAAQ,CAACK,OAAT,KAAqBK,SAAzB,EAAoCV,QAAQ,CAACK,OAAT,GAAmBI,IAAnB;IACpC,MAAME,OAAO,GAAGF,IAAI,GAAGT,QAAQ,CAACK,OAAhC;;IAEA,IAAIM,OAAO,GAAGZ,aAAd,EAA6B;MAC3BI,SAAS,CAACJ,aAAa,GAAGY,OAAjB,CAAT;MACAJ,qBAAqB,CAACC,OAAD,CAArB;IACD,CAHD,MAGO;MACL,IAAI,OAAOV,QAAP,KAAoB,UAAxB,EAAoCA,QAAQ;IAC7C;EACF,CAVD;;EAYA,OAAO,CAACM,KAAD,EAAQF,MAAM,GAAG,IAAjB,CAAP;AACD,CA9BD;;GAAMN,Y;;AAgCN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}